---
- name: Create logs directories
  file:
    path: "{{ ELK_ROOT_LOCATION }}/logs/{{ item }}"
    mode: 0755
    owner: root
    recurse: true
    state: directory
  with_items: "{{ ELK_SERVICES }}"

- name: Create the network for elasticsearch
  docker_network:
    name: "{{ ELK_DOCKER_NETWORK }}"

# ------------------------------------ ELASTICSEARCH ------------------------------------

- name: Create the elasticsearch container.
  docker_container:
    recreate: true
    state: started
    name: "{{ ELK_ELASTICSEARCH_SERVICE_NAME }}"
    hostname: "{{ ELK_ELASTICSEARCH_SERVICE_NAME }}"
    image: "{{ ELK_ELASTICSEARCH_SERVICE_NAME }}"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - "{{ ELK_ROOT_LOCATION }}/configs/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro"
      - elastic-data:/usr/share/elasticsearch/data
    env:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: "{{ ELK_ELASTISEARCH_PASSWORD }}"
    ulimits:
      - "memlock:-1:-1"
      - "nofile:65536:65536"
    purge_networks: true
    networks:
      - name: "{{ ELK_DOCKER_NETWORK }}"
  notify: restart elasticsearch
  when: ("elasticsearch" in ELK_SERVICES)
  tags: molecule-notest
  changed_when: false

# ---------------------------------------- KIBANA ----------------------------------------

- name: Create the kibana container.
  docker_container:
    recreate: true
    name: "{{ ELK_KIBANA_SERVICE_NAME }}"
    hostname: "{{ ELK_KIBANA_SERVICE_NAME }}"
    image: "{{ ELK_KIBANA_SERVICE_NAME }}"
    ports:
      - "5601:5601"
    volumes:
      - "{{ ELK_ROOT_LOCATION }}/configs/kibana.yml:/usr/share/kibana/config/kibana.yml:ro"
    ulimits:
      - "memlock:-1:-1"
      - "nofile:65536:65536"
    purge_networks: true
    networks:
      - name: "{{ ELK_DOCKER_NETWORK }}"
  notify: restart kibana
  when: ("kibana" in ELK_SERVICES)
  tags: molecule-notest.
  changed_when: false

# --------------------------------------- LOGSTASH ---------------------------------------
- name: Generate port list for Logstash Inputs.
  include: ports.yml
  vars:
    to_listen: "{{ item }}"
  with_items: "{{ ELK_LOGSTASH_INPUTS }}"

- name: Create the logstash container.
  docker_container:
    recreate: true
    name: "{{ ELK_LOGSTASH_SERVICE_NAME }}"
    hostname: "{{ ELK_LOGSTASH_SERVICE_NAME }}"
    image: "{{ ELK_LOGSTASH_SERVICE_NAME }}"
    ports: "{{ ELK_LOGSTASH_PORTS }}"
    volumes:
      - "{{ ELK_ROOT_LOCATION }}/configs/logstash.yml:/usr/share/logstash/config/logstash.yml:ro"
      - "{{ ELK_ROOT_LOCATION }}/logstash_patterns:{{ ELK_LOGSTASH_DOCKER_PATTERNS_DIR }}:ro"
      - "{{ ELK_ROOT_LOCATION }}/logstash_pipelines:/usr/share/logstash/pipeline:ro"
      - logstash-data:/usr/share/logstash/data
    ulimits:
      - "memlock:-1:-1"
      - "nofile:65536:65536"
    purge_networks: true
    networks:
      - name: "{{ ELK_DOCKER_NETWORK }}"
  notify: restart logstash
  when: ("logstash" in ELK_SERVICES)
  tags: molecule-notest
  changed_when: false
# --------------------------------------- SERVICES ---------------------------------------

- name: Create elk services files.
  template:
    dest: "/etc/systemd/system/{{ ELK_SERVICES_NAMES[item] }}.service"
    src: "service.j2"
    mode: 0664
  vars:
    SERVICE: "{{ ELK_SERVICES_NAMES[item] }}"
  notify: restart elk
  with_items: "{{ ELK_SERVICES }}"
  when: ansible_service_mgr == 'systemd'

- name: Enable elk services.
  service:
    name: "{{ ELK_SERVICES_NAMES[item] }}.service"
    state: started
    enabled: true
  with_items: "{{ ELK_SERVICES }}"
  when: ELK_SERVICES_ENABLED | bool
  changed_when: false
  tags: molecule-notest

# TODO: Add authentication
# TODO: Make idempotent
